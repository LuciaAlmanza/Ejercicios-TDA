def bodegon_dinamico(P, W):
    tam_arreglo=len(P)
    #hago matriz de dimensiones donde la cantidad de fila es la cant_elementos y la cant de 
    #columnas es el W asignado
    optimos=[[0 for _ in range(W+1)] for _ in range(tam_arreglo+1)]

    for fila in range(1,tam_arreglo+1):
        for columna in range(1,W+1):
            if P[fila-1]<=columna:
                optimos[fila][columna]=max(optimos[fila-1][columna],optimos[fila-1][columna-P[fila-1]]+P[fila-1])
            else:
                #si el espacio superaba al peso disponible, entonces el optimo para el objeto actual es omitirlo y quedarse
                #con el valor anterior
                optimos[fila][columna]=optimos[fila-1][columna]

    return getRes(P,W,tam_arreglo,optimos)

def getRes(P,W,tam_arreglo,optimos):
    res=[]
    for i in range(tam_arreglo,0,-1):
        if optimos[i][W]!=optimos[i-1][W]:
            res.append(P[i-1])
            W-=P[i-1]

    res.reverse()
    return res